

;; LFO controlled reactive music system
;; 8 June 2015 (original)
;; 6 August 2015 (interactive version)
;; 12 September 2015 (considated version under the compositional title Ripples)
;; 8 November 2015 (updated for Port MIDI and multi-channel output)
;; October 2016 (updated for Roli keyboard controls)
;; 16 November 2016 (added filtering for multiple or single MIDI channel i/o)

(*metro* 'set-tempo 120)
(sys:load "libs/core/pc_ivl.xtm")
;; set up MIDI i/o
(sys:load "libs/external/portmidi.xtm")
(pm_initialize)
(pm_print_devices) ;; check Terminal for printout of MIDI device hardware setup
(bind-val  midi_in PmStream* (pm_create_input_stream 1)) ;; change number to suit hardware setup
(bind-func get_midi_in (lambda () midi_in))
(bind-val midi_out PmStream* (pm_create_output_stream 5)) ;; change number to suit hardware setup
(bind-func get_midi_out (lambda () midi_out))
(define *iac* (get_midi_out))

;; flags to customise setup
(define two-piano-mode #t) ;; (#t or #f) pass on sustain pedal data when true
(bind-val multi-channel-in-mode i1 0) ;; (1 true or 0 false) accept input on all channels *or* only channel 1 (zero)
(bind-val multi-channel-out-mode i1 1) ;; (1 true or 0 false) send Ripples voices on channels 2, 3 and 4 *or* only on channel 1
(bind-val pass-through-on-zero i1 0) ;; (1 true or 0 false) forward the MIDI input to output on chan 1 (zero) - off by default)

(define lfo
	(lambda (rate depth)
		(* depth (sin (* rate 3.14159 (now))))))

;(lfo 4 1) ;; test

(define elastic-select
	(lambda(lst min max val)
		(let ((len (length lst))
			  (pos (/ val (- (+ max 1) min))))
			(list-ref lst (floor (* len pos))))))

;(elastic-select '(1 1 1 2 2 2 3 4 4 8) 0 127 127) ;; test

(define pitch-A 60)
(define interval-A 2)

(define pitch-B 60)
(define interval-B 2)

(define pitch-C 60)
(define interval-C 2)

(define pitch-D 60)
(define interval-D 2)

(bind-val pitch_H i64 60)

(bind-func get_pitch_H
	(lambda ()
		pitch_H))

; inital scale
(define scale '(0 2 4 5 7 9 11))

(define build-scale
	(lambda ()
		(let ((lst '()))
			(dotimes (i (get_pitch_hist_len))
				(set! lst (cons (get_pitch_in_hist i) lst)))
			(set_pitch_hist_updated 0)
			(set! scale lst))))

;; store pitches played recently
(bind-val pitch_hist_len i64 16)
(bind-val pitch_hist |16,i64|)
(bind-val pitch_hist_index i64 0)
(bind-val pitch_hist_updated i64 0)

(bind-func get_pitch_hist_len
	(lambda ()
		pitch_hist_len))

(bind-func get_pitch_in_hist
	(lambda (index:i64)
		(if (and (>= index 0) (< index pitch_hist_len))
			(aref pitch_hist index)
			0)))

(bind-func set_pitch_in_hist
	(lambda (index:i64 val:i64)
		(if (and (>= index 0) (< index pitch_hist_len))
			(aset! pitch_hist index (modulo val 12))
			0)))

(bind-func get_pitch_hist_updated
	(lambda()
		pitch_hist_updated))

(bind-func set_pitch_hist_updated
	(lambda(val:i64)
		(set! pitch_hist_updated val)))

;; store velocities played recently
(define calc-dynamic
	(lambda ()
		(let ((sum 0)
			  (prev-dyn (get_dyn_H)))
			(dotimes (i (get_dyn_hist_len))
				(set! sum (+ sum (get_dyn_in_hist i))))
			(set_dyn_H (real->integer (round (/ sum (get_dyn_hist_len)))))
			(set_dyn_hist_updated 0))))
			;(if (> (abs (- prev-dyn (get_dyn_H))) 3) (println 'dyn-is: (get_dyn_H))))))

;(calc-dynamic)

(bind-val dyn_H i64 64)
(bind-val dyn_hist_len i64 4)
(bind-val dyn_hist |4,i64|)
(bind-val dyn_hist_index i64 0)
(bind-val dyn_hist_updated i64 0)

(bind-func get_dyn_H
	(lambda ()
		dyn_H))

(bind-func set_dyn_H
	(lambda (val:i64)
		(set! dyn_H val)))

(bind-func get_dyn_hist_len
	(lambda ()
		dyn_hist_len))

(bind-func get_dyn_in_hist
	(lambda (index:i64)
		(if (and (>= index 0) (< index dyn_hist_len))
			(aref dyn_hist index)
			0)))

(bind-func set_dyn_in_hist
	(lambda (index:i64 val:i64)
		(if (and (>= index 0) (< index dyn_hist_len))
			(aset! dyn_hist index val)
			0)))

(bind-func get_dyn_hist_updated
	(lambda()
		dyn_hist_updated))

(bind-func set_dyn_hist_updated
	(lambda(val:i64)
		(set! dyn_hist_updated val)))

;; fill dynmaic hist
(dotimes (i (get_dyn_hist_len))
	(set_dyn_in_hist i 64))

;; other params

(define density 0)

(define looseness 0) ;; smaller values lead to tighter timing

(define gap-finder
	(lambda()
		(let ((lst (cl:sort (list 30 pitch-A pitch-B pitch-C (get_pitch_H) 100) <))
			  (gap 0)
			  (pos 0))
		     (dotimes (i (- (length lst) 1))
		     	(let ((dif (- (list-ref lst (+ i 1)) (list-ref lst i))))
		     		(cond ((> dif gap)
		     			(set! gap dif)
		     			(set! pos (+ (list-ref lst i) (/ gap 2)))))))
		     (real->integer pos))))

;(gap-finder)

;; override portmidi.xtm function to manage out-of-range and stuck notes
(impc:aot:do-or-emit
 (define play-midi-note
   (lambda (time device pitch velocity duration channel)
     ;(println "play-midi-note" pitch velocity duration)
     (if (or (< channel 0) (> channel 15)) (set! channel (min (max channel 0) 15)))
     (if (or (< pitch 0) (> pitch 127)) (set! pitch (min (max pitch 0) 127)))
     (if (or (< velocity 0) (> velocity 127)) (set! velocity (min (max velocity 0) 127)))
     (if (< duration 0) (set! duration 0))
     (callback time 'pm_send device *midi-note-on* channel pitch velocity)
		 (callback (+ time duration) 'pm_send device *midi-note-off* channel pitch velocity)
     (callback (+ time duration) 'pm_send device *midi-note-off* channel pitch velocity))))


;; generative agents
(define agent-A
	(lambda (lfo-rate interval delay dyn div)
		;(println 'Agent-A)
		(set! pitch-A (real->integer (round (+ pitch-A (+ (round (lfo lfo-rate interval)))))))
		(if (or (< pitch-A 30) (> pitch-A 100)) (set! pitch-A (gap-finder)))
		(set! density (+ density 1))
		(play-midi-note (+ (now) delay (lfo lfo-rate (* looseness *second*))) (get_midi_out)
			(real->integer (pc:quantize pitch-A scale))
			;(min 127 (+ dyn (real->integer (lfo lfo-rate 20))(random -10 10)))
			(min 127 (real->integer (+ (random -10 20) (/ (+ (get_dyn_H) (+ dyn (real->integer (lfo lfo-rate 20)))) 2))))
			(* (/ *second* div) (random 5 13) 0.1) 1)))

;(homo-play-midi-note (now) (get_midi_out) 60 100 10000 0)
;(play-midi-note (now) (get_midi_out) 60 100 10000 0)

(define agent-B
	(lambda (lfo-rate interval delay dyn div)
		;(println 'Agent-B)
		(set! pitch-B (real->integer (round (+ pitch-B (+ (round (lfo lfo-rate interval)))))))
		(if (or (< pitch-B 30) (> pitch-B 100)) (set! pitch-B (gap-finder)))
		(set! density (+ density 1))
		(play-midi-note (+ (now) delay (lfo lfo-rate (* looseness *second*))) (get_midi_out)
			(real->integer (pc:quantize pitch-B scale))
			;(min 127 (+ dyn (real->integer (lfo lfo-rate 20))(random -10 10)))
			(min 127 (real->integer (+ (random -10 20) (/ (+ (get_dyn_H) (+ dyn (real->integer (lfo lfo-rate 20)))) 2))))
			(* (/ *second* div) (random 5 13) 0.1) 2)))

(define agent-C
	(lambda (lfo-rate interval delay dyn div)
		;(println 'Agent-C)
		(set! pitch-C (real->integer (round (+ pitch-C (+ (round (lfo lfo-rate interval)))))))
		(if (or (< pitch-C 30) (> pitch-C 100)) (set! pitch-C (gap-finder)))
		(set! density (+ density 1))
		(play-midi-note (+ (now) delay (lfo lfo-rate (* looseness *second*))) (get_midi_out)
			(real->integer (pc:quantize pitch-C scale))
			;(min 127 (+ dyn (real->integer (lfo lfo-rate 20)) (random -10 10)))
			(min 127 (real->integer (+ (random -10 20) (/ (+ (get_dyn_H) (+ dyn (real->integer (lfo lfo-rate 20)))) 2))))
			(* (/ *second* div) (random 5 13) 0.1) 3)))

;(define agent-D
;	(lambda (lfo-rate interval delay dyn)
;		;(println 'Agent-D)
;		(set! pitch-D (real->integer (round (+ pitch-D (+ (round (lfo lfo-rate interval)))))))
;		(if (or (< pitch-D 30) (> pitch-D 100)) (set! pitch-D (gap-finder)))
;		(set! density (+ density 1))
;		(homo-play-midi-note (+ (now) delay (lfo lfo-rate (* looseness *second*))) (get_midi_out)
;			(real->integer (pc:quantize pitch-D scale))
;			;(min 127 (+ dyn (real->integer (lfo lfo-rate 20)) (random -10 10)))
;			(min 127 (real->integer (+ (random -10 10) (/ (+ (get_dyn_H) (+ dyn (real->integer (lfo lfo-rate 20)))) 2))))
;			(* (/ *second* div) (random 5 13) 0.1) 0)))

(define call-agent
	(lambda (agent pitch rate interval delay dyn)
		;(println 'calling-agent pitch)
		(let ((n (cond ((< (get_dyn_H) 40) 1)
					   ((or (< pitch 50) (< (get_dyn_H) 60)) (random '(1 1 2 2 3)))
					   (else (random '(1 2 3 4 6 8))))))
			(dotimes (i n)
				(callback (+ (now) (* i (/ 1 n) *second*)) agent rate interval (* delay *second*) dyn n)))))


;; interactive test
;(call-agent agent-A 60 8 interval-A 1 (+ 45 (real->integer (lfo 1 15))))

(bind-val agent_status_A i64 0)

(bind-func get_agent_status_A
	(lambda ()
		agent_status_A))

(bind-func set_agent_status_A
	(lambda (val:i64)
		(set! agent_status_A val)))

(bind-val hum_density i64 0)

(bind-func get_hum_density
	(lambda ()
		hum_density))

(bind-func set_hum_density
	(lambda (val:i64)
		(set! hum_density val)))

(bind-val hum_dynamic i8 0)

(bind-func get_hum_dynamic
	(lambda ()
		hum_dynamic))

(bind-func set_hum_dynamic
	(lambda (val:i8)
		(set! hum_dynamic val)))

(bind-val sustain i64 0)

(bind-func get_sustain
	(lambda ()
		sustain))

(bind-func set_sustain
	(lambda (val:i64)
		(set! sustain val)))

(bind-func trk-vol
  (lambda (trk:i32 vol:i32)
    (pm_send (get_midi_out) 176 (- trk 1) 7 vol)))

(bind-func midi_input_handler
  (let ((input_buffer:PmEvent* (zalloc PM_MIDI_BUFFER_SIZE))
        (read_count 0:i32)
        (i:i32 0))
    (lambda (input_stream:PmStream*)
      (set! read_count (Pm_Read input_stream input_buffer PM_MIDI_BUFFER_SIZE))
      ;(println "read_count:" read_count)
      (if (> read_count 0)
        (dotimes (i read_count)
					(let ((mess (Pm_Event_Message (pref-ptr input_buffer i)))
								(chan (Pm_Message_Channel mess))
								(type (Pm_Message_Type mess))
	          		(a (Pm_Message_Data1 mess))
	          		(b (Pm_Message_Data2 mess)))
						;; pass through on channel 1 (zero) if required
						(if pass-through-on-zero (pm_send (get_midi_out) type 0 a b))
		        ;;(if (and (= type 144) (> b 0)) ; note on all channels in
		        (if (and (if multi-channel-in-mode 1:i1 (= chan 0)) (= type 144) (> b 0)) ; note on, MIDI channel 0 only
		          (begin 	;(println " Data1:" a " Data2:" b)
											(set! pitch_H (i32toi64 a))
											(set_pitch_in_hist pitch_hist_index (i32toi64 a))
											(set! pitch_hist_index (modulo (+ pitch_hist_index 1) pitch_hist_len))
											(set! pitch_hist_updated 1)
											(set_dyn_in_hist dyn_hist_index (i32toi64 b))
											(set! dyn_hist_index (modulo (+ dyn_hist_index 1) dyn_hist_len))
											(set! dyn_hist_updated 1)
											(if (> b 0)
												(set_hum_density (+ (get_hum_density) 1))
												(set_hum_density (- (get_hum_density) 1)))
												(set_agent_status_A 1)))
							;;(if (or (= type 128) (and (= type 144) (= b 0))) ; note off from any channel
							(if (or (and (if multi-channel-in-mode 1:i1 (= chan 0)) (= type 128)) (and (= chan 0) (= type 144) (= b 0)))
				      		(set_hum_density (- (get_hum_density) 1)))
				      ;;(if (and (= type 176) (= a 64)) ;; sustain pedal cc any channel
				      (if (and (if multi-channel-in-mode 1:i1 (= chan 0)) (= type 176) (= a 64)) ;; sustain pedal cc chan 0 only
				      			(begin ;(println "sustain" a b)
				      				(set_sustain (i32toi64 a))))
							(if (and (if multi-channel-in-mode 1:i1(= chan 0)) (= type 176) (or (= a 107) (= a 109) (= a 111))) ;; rise control faders - cc
				      			(begin (println "fader" a b)
											(if (= a 107) (trk-vol 2 b))
											(if (= a 109) (trk-vol 3 b))
											(if (= a 111) (trk-vol 4 b)))))))
      void)))

;(trk-vol 4 50)

(sys:load "libs/core/xthread.xtm")

(bind-func midi_read_loop
  (let ((run 1)
        (i1 null)
        (i2 null)
        (i3 null)
        (i4 null)
        (htz 200.0))
    (lambda (input1)
      (set! i1 input1)
      (spawn (lambda ()
        (while (> run 0)
          (if (not (null? i1)) (midi_input_handler i1))
          (if (not (null? i2)) (midi_input_handler i2))
          (if (not (null? i3)) (midi_input_handler i3))
          (if (not (null? i4)) (midi_input_handler i4))
          (thread_sleep 0 (dtoi64 (/ 1.0e9 htz))))
        (println "Exiting midi-read")))
      void)))

(midi_read_loop (get_midi_in))

(define prev-sus 0)

(define polling
	(lambda ()
		;(println 'agent-A (get_agent_status_A))
		(if (= (get_pitch_hist_updated) 1) (build-scale))
		(if (= (get_dyn_hist_updated) 1) (calc-dynamic))
		(if (<> (get_agent_status_A) 0)
			  	(begin (println 'agent-play (get_dyn_H))
			   		(set! interval-A (if (> pitch-A 50) (random -7 8) (random '(-2 2 3 4 5 7))))
			   		(call-agent agent-A pitch-A 8 interval-A
			   			(if (< (get_dyn_H) 40) 1 1)
			   			(+ 45 (real->integer (lfo 1 10))))
			   		(set_agent_status_A 0)
			   		(set! interval-B (if (> pitch-B 50) (random -7 8) (random '(-2 2 4 5 7))))
			   		(call-agent agent-B pitch-B 4 interval-B
			   			(if (< (get_dyn_H) 40) 1 2)
			   			(+ 45 (real->integer (lfo 1 10))))
			   		(set! interval-C (if (> pitch-C 50) (random -7 8) (random '(-2 2 4 5 7))))
			   		(call-agent agent-C pitch-C 9 interval-C
			   			(if (< (get_dyn_H) 40) 1 3)
			   			(+ 45 (real->integer (lfo 1 10))))))
		(if (and two-piano-mode (<> (get_sustain) prev-sus))
			  	(begin (dotimes (i 3)
										(pm_send (get_midi_out) 176 (+ i 1) 64 (get_sustain)))
						(println 'sending-sustain)
			  		(set! prev-sus (get_sustain))))
		(callback (+ (now) (* *second* 1/2)) 'polling)))

(polling)

(println "End of Ripples setup")
